<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTTP on 古一 - 个人博客网站</title>
    <link>http://localhost:1313/tags/http/</link>
    <description>Recent content in HTTP on 古一 - 个人博客网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>古一</copyright>
    <lastBuildDate>Wed, 20 Jan 2021 14:24:30 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTTP 报文信息</title>
      <link>http://localhost:1313/post/http%E6%8A%A5%E6%96%87%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Wed, 20 Jan 2021 14:24:30 +0800</pubDate>
      
      <guid>http://localhost:1313/post/http%E6%8A%A5%E6%96%87%E4%BF%A1%E6%81%AF/</guid>
      <description>1. HTTP 报文 用于 HTTP 协议交互的信息被称为 HTTP 报文。请求端（客户端）的 HTTP 报文叫做请求报文，响应端（服务器端）的叫做响应报文。 HTTP 报文本身是由多行（用 CR+LF 作换行符）数据构成的字符串文本。
报文首部
服务器端或客户端需要处理的请求或响应的内容以及属性。
报文主体
应被发送的数据。
 两者由最初出现的 空行（CR+LF）来划分。通常，并不一定要有报文主体。
 2. 报文结构 3. 编码提升传输速率  HTTP 在传输数据时可以按照数据原貌直接传输，但也可以在传输过 程中通过编码提升传输速率。通过在传输时编码，能有效地处理大量 的访问请求。但是，编码的操作需要计算机来完成，因此会消耗更多 的 CPU 等资源。
 报文主体和实体主体的差异 报文
报文（message） 是 HTTP 通信中的基本单位，由 8 位组字节流（octet sequence， 其中 octet 为 8 个比特）组成，通过 HTTP 通信传输。
实体
实体（entity） 作为请求或响应的有效载荷数据（补充项）被传输，其内容由实 体首部和实体主体组成。
</description>
    </item>
    
    <item>
      <title>简单的 HTTP 协议</title>
      <link>http://localhost:1313/post/%E7%AE%80%E5%8D%95%E7%9A%84-http-%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Tue, 19 Jan 2021 14:24:30 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%AE%80%E5%8D%95%E7%9A%84-http-%E5%8D%8F%E8%AE%AE/</guid>
      <description>1. HTTP 协议用于客户端和服务器端之间的通信 请求访问文本或图像等资源的一端称为客户端，而提供资源响应的一 端称为服务器端。
HTTP请求报文 1 2 3 4 5 6 7  POST /user HTTP/1.1 //请求行 Host: www.user.com Content-Type: application/x-www-form-urlencoded Connection: Keep-Alive User-agent: Mozilla/5.0. //以上是首部行 （此处必须有一空行） //空行分割header和请求内容 name=world 请求体   POST
起始行开头的POST表示请求访问服务器的类型，称为方法。
user
随后的字符串 /user 指明了请求访问的资源对象， 也叫做请求 URI。
HTTP版本号
HTTP/1.1，即 HTTP 的版本 号，用来提示客户端使用的 HTTP 协议功能。
 请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。
 HTTP返回报文 1 2 3 4 5 6 7  HTTP/1.1 200 OK Date: Tue, 10 Jul 2020 06:50:15 GMT Content-Length: 362 Content-Type: text/html &amp;lt;html&amp;gt; .</description>
    </item>
    
    <item>
      <title>了解 Web 及网络基础</title>
      <link>http://localhost:1313/post/%E4%BA%86%E8%A7%A3-web-%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 18 Jan 2021 16:25:17 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BA%86%E8%A7%A3-web-%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</guid>
      <description>1. TCP/IP协议分层 协议分层
  应用层
  传输层
  网络层
  数据链路层
  提示
如果某些地方需要改动，只需要把变动的层修改逻辑。各层对外接口部分规划好，内部设计就比较灵活了。分层好处之一。
应用层 应用层决定了向用户提供应用服务时通信的活动。TCP/IP 协议族内预存了各类通用的应用服务。比如，FTP（File Transfer Protocol，文件传输协议）和 DNS（Domain Name System，域 名系统）服务就是其中两类。 HTTP 协议也处于该层。
传输层 传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报 协议）。
网络层 网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。
链路层 处理连接网络的硬件部分（网卡，光纤）。
2. TCP/IP 通信传输流 IP协议
发送端在层与层之间传输时，每经过一层必定会打上一个该层的所属的首部信息。
接收端同理，每经过一层时，会把对应的首部消去。
 3. 与 HTTP 关系密切的协议 : IP、TCP 和 DNS 负责传输的 IP 协议 IP协议
IP协议的作用就是把数据包传输给对方。需要通过IP地址和MAC地址才能确保准确送达到对方。
IP地址就是节点被分配的地址，MAC地址就是网卡的固定地址。IP地址和MAC地址进行配对。</description>
    </item>
    
  </channel>
</rss>
